{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,iBAAkBJ,SAASC,cAAc,0BAG3C,SAASI,EAAcC,EAAQC,GAY7B,OAXgB,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,SAAQC,UAElBG,EAAO,CAAEJ,SAAQC,UA4BvBT,EAAKK,YAAYY,MAAQ,GACzBjB,EAAKC,WAAWgB,MAAQ,GACxBjB,EAAKI,UAAUa,MAAQ,KA3BlBR,MAKPT,EAAKM,iBAAiBY,iBAAiB,SAEvC,SAAiCC,GAC/BA,EAAIC,iBAKJ,IAHA,IAAIC,EAAaC,OAAOtB,EAAKC,WAAWgB,OACpCM,EAAYD,OAAOtB,EAAKI,UAAUa,OAClCO,EAAWF,OAAOtB,EAAKK,YAAYY,OAC9BQ,EAAiB,EAAGA,EAAiBD,EAAUC,GAAkB,EACxElB,EAAc,EAAIkB,EAAgBJ,EAAaI,EAAiBF,GAC7DG,MAAK,SAAAC,G,IAAGnB,EAAMmB,EAANnB,OAAQC,EAAKkB,EAALlB,MACfmB,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAsCC,OAAbvB,EAAO,QAAYuB,OAANtB,EAAM,UAErEuB,OAAM,SAAAL,G,IAAGnB,EAAMmB,EAANnB,OAAQC,EAAKkB,EAALlB,MAChBmB,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAqCF,OAAbvB,EAAO,QAAYuB,OAANtB,EAAM,a","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  btnSubmitPromise: document.querySelector('button[type=\"submit\"]'),\n};\n\nfunction createPromise(amount, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ amount, delay });\n      } else {\n        reject({ amount, delay });\n      }\n      clearInputs(); // очищує інпути після сабміту\n    }, delay);\n  });\n  return promise;\n}\n\nrefs.btnSubmitPromise.addEventListener('click', onBtnSubmitPromiseClick);\n\nfunction onBtnSubmitPromiseClick(evt) {\n  evt.preventDefault();\n\n  let firstDelay = Number(refs.inputDelay.value);\n  let delayStep = Number(refs.inputStep.value);\n  let position = Number(refs.inputAmount.value);\n  for (let sequenceNumber = 0; sequenceNumber < position; sequenceNumber += 1) {\n    createPromise(1 + sequenceNumber, firstDelay + sequenceNumber * delayStep)\n      .then(({ amount, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${amount} in ${delay}ms`);\n      })\n      .catch(({ amount, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${amount} in ${delay}ms`);\n      });\n  }\n}\n\nfunction clearInputs() {\n  refs.inputAmount.value = '';\n  refs.inputDelay.value = '';\n  refs.inputStep.value = '';\n}\n// ----------------------------------------------------------------------------------\n\n// --------інше рішення(повідомлення виводяться у консоль)------------\n\n// const refs = {\n//   delayInput: document.querySelector('input[name=\"delay\"]'),\n//   stepInput: document.querySelector('input[name=\"step\"]'),\n//   amountInput: document.querySelector('input[name=\"amount\"]'),\n//   createBtn: document.querySelector('button[type=\"submit\"]'),\n// };\n\n// refs.createBtn.addEventListener('click', counter);\n\n// function createPromise(position, delay) {\n//   const promise = new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   })\n//     .then(({ position, delay }) => {\n//       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     })\n//     .catch(({ position, delay }) => {\n//       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     });\n//   return promise;\n// }\n\n// function counter(evt) {\n//   evt.preventDefault();\n//   const delay = Number(refs.delayInput.value);\n//   const step = Number(refs.stepInput.value);\n//   const position = refs.amountInput.value;\n//   for (let i = 0; i < position; i += 1) {\n//     createPromise(1 + i, delay + i * step);\n//   }\n// }\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","btnSubmitPromise","$ce04d3a99e08e73b$var$createPromise","amount","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","value","addEventListener","evt","preventDefault","firstDelay","Number","delayStep","position","sequenceNumber","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.476db708.js.map"}