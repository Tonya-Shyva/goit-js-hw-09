{"mappings":"AAmDyC,MAAnCA,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,UAAWJ,SAASC,cAAc,0BAKpC,SAASI,EAAcC,EAAUC,GAkB/B,OAjBgB,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,CAAEM,SAAAT,EAAUU,MAAAT,IAEpBG,EAAO,CAAEK,SAAAT,EAAUU,MAAAT,MAEpBA,MAEFU,MAAK,EAACF,SAAEA,EAAQC,MAAEA,MACjBE,QAAQC,IAAI,uBAAqBJ,QAAiBC,UAEnDI,OAAM,EAACL,SAAEA,EAAQC,MAAEA,MAClBE,QAAQC,IAAI,sBAAoBJ,QAAeC,UAlBrDlB,EAAKM,UAAUiB,iBAAiB,SAuBhC,SAAiBC,GACfA,EAAIC,iBACJ,MAAMP,EAAQQ,OAAO1B,EAAKC,WAAW0B,OAC/BC,EAAOF,OAAO1B,EAAKI,UAAUuB,OAC7BV,EAAWjB,EAAKK,YAAYsB,MAClC,IAAK,IAAIE,EAAI,EAAGA,EAAIZ,EAAUY,GAAK,EACjCtB,EAAc,EAAIsB,EAAGX,EAAQW,EAAID","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// const refs = {\n//   inputDelay: document.querySelector('input[name=\"delay\"]'),\n//   inputStep: document.querySelector('input[name=\"step\"]'),\n//   inputAmount: document.querySelector('input[name=\"amount\"]'),\n//   btnSubmitPromise: document.querySelector('button[type=\"submit\"]'),\n// };\n\n// function createPromise(amount, delay) {\n//   const promise = new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(amount, delay);\n//       } else {\n//         reject(amount, delay);\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n// refs.btnSubmitPromise.addEventListener('click', onBtnSubmitPromiseClick);\n\n// function onBtnSubmitPromiseClick(evt) {\n//   evt.preventDefault();\n//   let firstDelay = Number(refs.inputDelay.value);\n//   let delayStep = Number(refs.inputStep.value);\n//   for (\n//     let sequenceNumber = 0;\n//     sequenceNumber < refs.inputAmount.value;\n//     sequenceNumber += 1\n//   ) {\n//     createPromise(1 + sequenceNumber, firstDelay + sequenceNumber * delayStep)\n//       .then((sequenceNumber, delay) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${sequenceNumber} in ${delay}ms`\n//         );\n//       })\n//       .catch((sequenceNumber, delay) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${sequenceNumber} in ${delay}ms`\n//         );\n//       });\n//   }\n// }\n// ----------------------------------------------------------------------------------\n\n// --------інше рішення(повідомлення виводяться у консоль)------------\n\nconst refs = {\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  createBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.createBtn.addEventListener('click', counter);\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  return promise;\n}\n\nfunction counter(evt) {\n  evt.preventDefault();\n  const delay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n  const position = refs.amountInput.value;\n  for (let i = 0; i < position; i += 1) {\n    createPromise(1 + i, delay + i * step);\n  }\n}\n"],"names":["$47d4ff9957288465$var$refs","delayInput","document","querySelector","stepInput","amountInput","createBtn","$47d4ff9957288465$var$createPromise","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","delay","then","console","log","catch","addEventListener","evt","preventDefault","Number","value","step","i"],"version":3,"file":"03-promises.23436bb0.js.map"}